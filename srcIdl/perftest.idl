/*
 * (c) 2005-2017  Copyright, Real-Time Innovations, Inc. All rights reserved.
 * Subject to Eclipse Public License v1.0; see LICENSE.md for details.
 */

#ifdef RTI_CUSTOM_TYPE
#include "custom.idl"
#endif

const long MAX_SYNCHRONOUS_SIZE = 63000;
const long MAX_BOUNDED_SEQ_SIZE = 63000;
const long MAX_PERFTEST_SAMPLE_SIZE = 2147482620; // 2GB-1KB-4B (RTI_CDR_MAX_SERIALIZED_SIZE)
const long MAX_CFT_VALUE = 65535;
const long KEY_SIZE = 4;
const unsigned long DEFAULT_THROUGHPUT_BATCH_SIZE = 8192; // 8kB

/*
 * Topic Names for the different channel RTI Perftest will use
 */
const string THROUGHPUT_TOPIC_NAME = "Throughput";
const string LATENCY_TOPIC_NAME = "Latency";
const string ANNOUNCEMENT_TOPIC_NAME = "Announcement";

struct TestData_t {
    octet key[KEY_SIZE];

    long entity_id;
    unsigned long seq_num;
    long timestamp_sec;
    unsigned long timestamp_usec;
    long latency_ping;
    sequence<octet, MAX_BOUNDED_SEQ_SIZE> bin_data;
  #ifdef RTI_CUSTOM_TYPE
    RTI_CUSTOM_TYPE custom_type;
    // custom_type_size is the serialize size of the field custom_type
    // in the the sample that we send on the wire
    long custom_type_size;
  #endif

}; //@Extensibility FINAL_EXTENSIBILITY


struct TestDataKeyed_t {
    octet key[KEY_SIZE]; //@key

    long entity_id;
    unsigned long seq_num;
    long timestamp_sec;
    unsigned long timestamp_usec;
    long latency_ping;
    sequence<octet, MAX_BOUNDED_SEQ_SIZE> bin_data;
  #ifdef RTI_CUSTOM_TYPE
    RTI_CUSTOM_TYPE custom_type; //@key
    long custom_type_size;
  #endif
}; //@Extensibility FINAL_EXTENSIBILITY

struct TestDataLarge_t {
    octet key[KEY_SIZE];

    long entity_id;
    unsigned long seq_num;
    long timestamp_sec;
    unsigned long timestamp_usec;
    long latency_ping;
    sequence<octet> bin_data;
  #ifdef RTI_CUSTOM_TYPE
    RTI_CUSTOM_TYPE custom_type;
    long custom_type_size;
  #endif
}; //@Extensibility FINAL_EXTENSIBILITY

struct TestDataKeyedLarge_t {
    octet key[KEY_SIZE]; //@key

    long entity_id;
    unsigned long seq_num;
    long timestamp_sec;
    unsigned long timestamp_usec;
    long latency_ping;
    sequence<octet> bin_data;
  #ifdef RTI_CUSTOM_TYPE
    RTI_CUSTOM_TYPE custom_type; //@key
    long custom_type_size;
  #endif
}; //@Extensibility FINAL_EXTENSIBILITY

